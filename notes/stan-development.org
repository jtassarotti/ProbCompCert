#+TITLE: Development notes for ProbCompCert
#+STARTUP: hideblocks
#+LATEX_HEADER: \usepackage[margin=1.0in]{geometry}

The aim of this document aims to provide a roadmap to the current ProbCompCert
codebase (revision 0f5530f6 on the feature/targetproof branch). It is a review
of  development workflows, debugging tips, and learning challenges for myself
([[https://github.com/stites/][stites]]). The current status of the work, and the expected next steps, form the
final section of this document.

* A motivating example
At a high level, when navigating ~stanfrontend/~, all transformations can be
summarized as being found in ~driver/Sparse.ml~, responsible for parsing and type
resolution, and ~stanfrontend/Scompiler.v~, which runs the remainder of the
pipeline.

Note that, at present, only the density compilation has been verified. Given a
Stan program ~simple.stan~ a library in the form of a ~simple.s~ will be
produced instead of a runnable binary. To perform inference on the described
model function, the provided ~Runtime.c~ must be compiled with the resulting
~simple.s~ to produce a runnable binary. This is described in more detail in
[[id:c4a1d2d3-7ccf-4b21-94af-1a659f3fa204][Compiling and running]]. The required C files for compiling are described in
[[id:30d19e92-b786-43e7-ae73-52bcebba8592][Additional C files]].

Given the following program ~simple.stan~:

#+BEGIN_SRC sh :results output drawer
cat ../stanfrontend/tests/simple/simple.stan
#+END_SRC

#+RESULTS:
:results:
data {
  int flips[100];
}
parameters {
  real<lower=0.0,upper=1.0> mu;
}
model {
  mu ~ uniform(0,1);
  for (i in 1:100) {
    flips[i] ~ bernoulli(mu);
  }
}
:end:

We initially want to take the parsed ~Stan~ AST (defined in [[file:~/git/ProbCompCert/stanfrontend/Stan.v][Stan.v]]) and enrich
it with type information (defined in [[file:~/git/ProbCompCert/stanfrontend/StanE.v][StanE.v]]). This "elaborated Stan" forms our
first intermediate representation and still closely resembles the original Stan AST.

Shortly after, StanE is transformed into CStan, which remains the intermediate
representation of choice for the following, ordered, transformations:
1. converting sampling statements ~_ ~ uniform(0,1)~ and ~_ ~ bernoulli(mu)~ into external C calls from the packaged ~libstan~ library.
2. moving all free variables into one of two structs, the "parameters" struct for ~mu~ and the "data" struct for ~flips~.
3. applying the constraint transformations of ~lower=0.0~ and ~upper=1.0~ to ~mu~ (according to the Stan documentation).
4. removal of the implicit target expression returned at the end of the ~model~ block.

Additional library functions will be generated to get and set a generated
parameter struct as well as to initialize data from the command line (a work in
progress).

* Project structure
Slightly updating the initial proposed architecture[fn:1] ProbCompCert has the
following transformation passes:

#+begin_src dot :file ./arch.png :results none
digraph proposed_arch {
    Text   -> Stan   [label = "Parsing"];
    Stan   -> StanE  [label = "Type Resolution"];
    StanE  -> CStan1 [label = "Denumpyfication"];
    CStan1 -> CStan2 [label = "Sampling"];
    CStan2 -> CStan3 [label = "Transformed parameters"];
    CStan3 -> CStan4 [label = "Constraints"];
    CStan4 -> CStan5 [label = "Variable Allocation"];
    CStan6 -> CStan7 [label = "Target"];
    CStan7 -> Clight [label = "Code Generation"];
}
#+end_src

From the originaly proposal the following changes have been made:
- the CStan is used for most transformations.
- the "Truncation" and "Vectors" passes have been removed and may be introduced at a later point.
- Denumpification (the StanE \to CStan transformation) has been added.

~driver/Sparse.ml~ is responsible for the first two transforms, the remaining
transforms are found in ~stanfrontend/Scompiler.v~ the the function:

#+begin_example coq
Definition transf_stan_program(p: StanE.program): res Clight.program :=
  OK p
  @@@ time "Denumpyification" Denumpyification.transf_program
  @@@ time "Sampling" Sampling.transf_program
  @@@ time "Constraints" Constraints.transf_program
  @@@ time "VariableAllocation" VariableAllocation.transf_program
  @@@ time "Target" Target.transf_program
  @@@ time "Backend" backend.
#+end_example

Note that no "Transformed parameters" exists in this pipeline for the time
being.

** ~driver/Sparse.ml~
Sparse denotes a lot of the "messier" code which loads up manually defined
external function signatures and puts them in the global scope for our StanE
functions.

** ~stanfrontend/Denumpification.v~
Desugar StanE from a high-level language into a thin layer above Clight.

** ~stanfrontend/Sampling.v~
Convert sampling statements into external log-pdf or log-pmf calls.

** ~stanfrontend/Constraints.v~
Defines enough constraint transformations to correctly compile ~simple.stan~.

** ~stanfrontend/VariableAllocation.v~
The intention of this pass is to takes the original list of free variables of
parameters, which can be found on a CStan program, and creates a ~Param~ struct.
It does a similar thing in order to construct the ~Data~ struct.

In addition, there are many other helper functions necessary to have the
compiler generate in order to correctly implement the inference procedure
defined in Runtime.c. These include:
- ~get_state~ and ~set_state~ -- these get and set the global parameters struct and are used to perform parameter updates during inference
- ~propose~ provide a proposal parameter struct
- ~print_state~ and ~print_data~ which contains some naive generated debugging output
- ~set_data~ (work in progress) the ability to set the global data struct -- this allows us to initialize this struct from the command line.

This pass additionally ensures that each of these functions correctly reference
parameter or data structs. This is done by case analysis on the
~CStan.blocktype~ which is available on every ~CStan.function~ via ~CStan.fn_blocktype~.

** ~stanfrontend/Target.v~
compile away any ~target += s~ statements, then compile away all ~etarget~ expressions.
** ~stanfrontend/Sbackend.v~
Convert a CStan program into a Clight program. This is as simple as stripping
away extra stan-related information from the AST.

After this, the compiled Clight enters the CompCert pipeline at the ~SimplExpr~
transformation.  The ~SimplLocals~ transformation is _not_ used for ProbCompCert.

** Proof code
Two proofs exist. Each proof uses it's own semantics under the following namings
scheme:
- ~<Name>.v~ :: transformation ~Name~
- ~<Name>proof.v~ :: proof of correctness
- ~CStanSemantics<Name>proof.v~ :: operational semantics for CStan for this transformation pass.
- ~CStanCont.v~ :: shared continuations across the operational semantics

The reason why we have transformation-specific operational semantics is
superficial at the moment -- primarily so that we can experimentally adjust the
semantics for ~Targetproof~ without breaking the existing ~Sbackendproof~.

*** ~stanfrontend/Sbackendproof.v~
All but two cases are complete here. These are the cases that evaluating
expressions are correct for the ~cast~ and ~field struct~ expressions. these
have been admitted because ~VariableAllocation.v~ was produced after the proof
was written. There are no forseen challenges with these cases, however the
reference proofs of ~SimplExprproof.v~ and ~Simpllocalsproof.v~ are a little
intricate so parsing these cases out is just a matter of time.

*** ~stanfrontend/Targetproof.v~
This proof has proceeded very slowly and has hit a few stumbling blocks.
Largely, this is not an issue with the nature of the proof -- just my comfort
with theorem proving.

One characteristic of this proof is that it introduces a prelude and epilogue to
initialize the target identifier to 0, and to return this identifier as a result
of program execution. This necessitates being comfortable with CompCert's
continuations infrastructure -- suggestions for understanding this can be found
in [[id:16f75123-efb6-423d-9ec6-c5cacd6260de][Learning CompCert]].

The current proof aims is straightforward in nature. there exists a target
identifier on the ~CStanSemanticsTarget.Model~ which maintains the target
density. This real must be in sync with, and preserve, the local target
identifier that is being updated during execution of the program. As a program
is executed it starts in a ~CStanSemanticsTarget.block_state~ of ~Other~ and,
when calling the ~model~ function, initializes a ~Model 0~ state. When the model
function has been transformed, the resulting state is discarded and computation
continues in the ~Other~ state.

An alternative proof would have entailed postulating an existential target
exists at the top level. This change represented a large refactor late into the
development of this proof, and this course of action was not pursued extensively.

As I recall, a third way to approach this would have been to run a
validator to garuntee that the target identifier had the correct semantics
before proceeding with the correctness proof. I am a bit fuzzy on these details.

** Additional C files
:PROPERTIES:
:ID:       30d19e92-b786-43e7-ae73-52bcebba8592
:END:
*** ~Runtime.c~
A simple inference engine. This is very readable and should be intuitive.
*** ~stanlib.c~
- Includes lpdf and lpmf functions used during the Sampling transformation
- Includes some helper sampling functions.
- some basic math functions exist like ~logit~ and ~expit~. These are used during constraint transformation.
- ~init_unconstrained~ is the initialization function as determined by the Stan reference manual (all unconstrained parameters are sampled from Uniform(-2, 2))
- some rudamentary helper functions for printing are included. These should be removed in the long term.

*** ~staninput.c~
This includes a first attempt at initializing the Data struct from the command
line. Currently this is not functional.

** Miscellaneous files
while in ~stanfrontend/~ we see:

#+begin_src sh
ls ../stanfrontend | grep 'v$' | grep -Ev "(Stan|CStan|Scompil|Denum|Sampl|Constr|Variable|Target|Sback)"
#+end_src

#+RESULTS:
| Runtime.v    |
| Sops.v       |
| Sparser.v    |
| Ssemantics.v |
| Stypes.v     |
| Sutils.v     |
| System.v     |

- Runtime.v :: compcert-compiled Coq file of ~Runtime.c~.
- Sops.v :: Stan operators
- Sparser.v :: The output parser from ~Sparser.vy~
- Stypes.v  :: Stan types
- Ssemantics.v :: A placeholder for the final semantics of a StanE program
- Sutils.v :: An attempt to share utility functions across modules
- System.v :: initial attempt to state the desired final theorem of ProbCompCert

* Development Workflow
I had two development workflows when working on this project. For context, this
project was developed on a NixOS box using flakes, but because of some version
mismatches, opam was used to provide the development environment.
** Opam information
Opam outputs an unreadable end-of-file character for emacs, here I supress the
terminal output and paste it in a comment (see [[file:stan-development.org][stan-development.org]]).

#+begin_src bash
opam list --dev --normalise --color=never --readonly --columns=name,version
#+end_src

#+begin_comment
# Packages matching: installed
# Name                  # Version
astring                 0.8.5
base                    v0.14.1
base-bigarray           base
base-bytes              base
base-threads            base
base-unix               base
base_bigstring          v0.14.0
base_quickcheck         v0.14.1
bigarray-compat         1.0.0
bin_prot                v0.14.0
biniou                  1.2.1
camomile                1.0.2
charInfo_width          1.1.0
cmdliner                1.0.4
conf-findutils          1
conf-g++                1.0
coq                     8.12.0
coq-bignums             8.12.0
coq-coq2html            1.2
coq-coquelicot          3.1.0
coq-ext-lib             0.11.3
coq-flocq               3.3.1
coq-interval            4.0.0
coq-itree               4.0.0
coq-mathcomp-ssreflect  1.11.0
coq-paco                4.1.1
coq-reduction-effects   0.1.2
coq-stdpp               1.4.0
core                    v0.14.1
core_kernel             v0.14.1
cppo                    1.6.7
csexp                   1.5.1
ctypes                  0.18.0
dot-merlin-reader       4.1
dune                    2.8.5
dune-build-info         2.8.5
dune-configurator       2.8.5
easy-format             1.3.2
fieldslib               v0.14.0
fix                     20201120
fpath                   0.7.3
integers                0.4.0
jane-street-headers     v0.14.0
jst-config              v0.14.0
lambda-term             3.1.0
lwt                     5.4.0
lwt_log                 1.1.1
lwt_react               1.1.4
menhir                  20210419
menhirLib               20210419
menhirSdk               20210419
merlin                  3.5.0
mew                     0.1.0
mew_vi                  0.5.0
mmap                    1.1.0
num                     1.3
ocaml                   4.10.2
ocaml-base-compiler     4.10.2
ocaml-compiler-libs     v0.12.3
ocaml-config            1
ocaml-migrate-parsetree 2.1.0
ocaml-version           3.1.0
ocamlbuild              0.14.0
ocamlfind               1.9.1
ocamlformat             0.18.0
ocp-indent              1.8.1
ocplib-endian           1.1
octavius                1.2.2
odoc                    1.5.2
ounit2                  2.2.4
parsexp                 v0.14.0
ppx_assert              v0.14.0
ppx_base                v0.14.0
ppx_bench               v0.14.1
ppx_bin_prot            v0.14.0
ppx_cold                v0.14.0
ppx_compare             v0.14.0
ppx_custom_printf       v0.14.1
ppx_derivers            1.2.1
ppx_enumerate           v0.14.0
ppx_expect              v0.14.1
ppx_fields_conv         v0.14.2
ppx_fixed_literal       v0.14.0
ppx_hash                v0.14.0
ppx_here                v0.14.0
ppx_inline_test         v0.14.1
ppx_jane                v0.14.0
ppx_js_style            v0.14.0
ppx_let                 v0.14.0
ppx_module_timer        v0.14.0
ppx_optcomp             v0.14.1
ppx_optional            v0.14.0
ppx_pipebang            v0.14.0
ppx_sexp_conv           v0.14.3
ppx_sexp_message        v0.14.1
ppx_sexp_value          v0.14.0
ppx_stable              v0.14.1
ppx_string              v0.14.1
ppx_typerep_conv        v0.14.2
ppx_variants_conv       v0.14.1
ppxlib                  0.22.0
re                      1.9.0
react                   1.2.1
result                  1.5
seq                     base
sexplib                 v0.14.0
sexplib0                v0.14.0
spawn                   v0.13.0
splittable_random       v0.14.0
stdio                   v0.14.0
stdlib-shims            0.3.0
time_now                v0.14.0
timezone                v0.14.0
topkg                   1.0.3
trie                    1.0.0
typerep                 v0.14.0
tyxml                   4.5.0
uchar                   0.0.2
user-setup              0.7
utop                    2.7.0
uucp                    13.0.0
uuseg                   13.0.0
uutf                    1.0.2
variantslib             v0.14.0
yojson                  1.7.0
zarith_stubs_js         v0.14.0
zed                     3.1.0
#+end_comment

#+begin_src bash
opam list --dev --normalise --color=never --readonly --columns=name,version --pin
#+end_src

#+begin_example
# Packages matching: pinned
# Name # Version
coq    8.12.0
num    1.3
#+end_example

In addition to the pinned packages above, the following are probably relevant manually
installed packages:

#+begin_example
menhir                  20210419
merlin                  3.5.0
num                     1.3
ocaml-base-compiler     4.10.2
ocamlformat             0.18.0
sexplib                 v0.14.0
user-setup              0.7
utop                    2.7.0
#+end_example

** Compiling and running
:PROPERTIES:
:ID:       c4a1d2d3-7ccf-4b21-94af-1a659f3fa204
:END:
If you drop into a ~nix develop~ shell, you can access my helper scripts by
invoking ~menu~. I have this loaded with direnv via a ~use flake~ .envrc file.

*** Compiling ccompstan
To compile a program, you can use the ~ccompstan~ script found in flake.nix:

# #+begin_src sh
# cat ../.bin/ccompstan
# #+end_src

#+begin_example sh
#!/usr/bin/env bash
set -euo pipefail

# store some directory variables.
current_dir=$PWD
root_dir=$(git rev-parse --show-toplevel)
stan_dir=$root_dir/stanfrontend

# store the name of the program
prog=${1##*/}
name=${prog%.*}
parent_dir="$(dirname -- "$(readlink -f -- "$1")")"
cd $root_dir

# working directory is stan dir
cd stanfrontend

# ccomp doesn't compile down to object files, just asm
ccomp -g3 -c $parent_dir/$name.stan && ccomp -c ${name}.s || exit 1

# build libstan.so
ccomp -g3 -c stanlib.c
ld -shared stanlib.o -o libstan.so

# runtime is dependent on libstan, temporarily.
ccomp -g3 -I${stan_dir} -c Runtime.c

# compile the final binary
ccomp -g3 -L${stan_dir} -Wl,-rpath=${stan_dir} -L../out/lib/compcert -lm -lstan ${name}.o Runtime.o -o runit

# tell the user what to do next
echo "compiled! ./stanfrontend/runit INT"
#+end_example

*** Working on non-proof code
My workflow to prototype to non-proof code is to start a continuous loop of this
script on save by using the ~watchexec~ tool. This is accessible via the
~watch-stan-debug~ command in flake.nix.

*** Working on proofs
For proof code. I use ProofGeneral in doom-emacs. I try to keep two windows open
at a time so that I don't have to interrupt developing a proof in order to poke
around a reference proof from somewhere else in CompCert.

I encountered two hiccups with ProofGeneral in doom emacs:
- if you use company-coq, the flycheck spinner takes up a lot of cpu cycles and
  can slow everything down. This was solved in a github issue on company-coq
  (but I just disabled this).
- doom emacs loads coq slowly because it loads PG to find the correct indent of
  the file, but this slows down files considerably. Joe coadvises a student who
  came up with this workaround:

  #+begin_src emacs-lisp
  ;; the regular smie-config-guess takes forever in Coq mode due to some advice
  ;; added by Doom; replace it with a constant
  (defun my-smie-config-guess ()
    (if (equal major-mode 'coq-mode) 2 nil))
  (advice-add 'smie-config-guess :before-until #'my-smie-config-guess)
  #+end_src

* Debugging Tips
- If something goes terribly wrong and you need to ~make clean~ I usually comment out
  lines 44-47 (the coq-proba files) before running clean. This is largely safe
  to do.
- never ~make~, always ~make -j~
- Don't be afraid to hard code a lot of values and mess with Runtime.c
- If you do this, you will need to initialize a lot of types in ~driver/Sparse.ml~

Originally, I updated ~clightgen~ to work with stan files. I compared the
Coq-generated clight IR from a stan file to the ~clightgen~ output of reference
C files (what I expected this output to be).

In retrospect, learning about the ~dclight~ and ~dcminor~ flags would have saved
me a lot of time. The output of ~clightgen~ is not sufficient and is not as good
of a representation as the true ~*.light.c~ files from the compilers. To invoke
this on the ~simple.stan~ program you would use: ~ccomp -dclight -dcminor -c
stanfrontend/tests/simple/simple.stan~. This is instrumental in understanding
where your errors come during compilation.

Prior to finding this out, I also resorted to adjusting the extracted ocaml (in
~extraction/~) to debugging programs. This can be quite painful since Coq
strings get broken down to lists of characters in OCaml and all changes are lost
after a fresh ~make~.
* Learning CompCert
:PROPERTIES:
:ID:       16f75123-efb6-423d-9ec6-c5cacd6260de
:END:
This project constitutes my first foray into learning Coq. Previously, I had
some experience working with purely functional programming languages (namely
working with Haskell on several moderate-to-large industry projects).
** DSSS17 workshop
https://xavierleroy.org/courses/DSSS-2017/

Xavier's workshop proved very useful in understanding continuations and the
overall structure of compcert. There are four videos on youtube as well which
are worth reviewing before starting to hack on ProbCompCert.

After watching these videos, pull down the DSSS 2017 repository and go through
the example problems. These were a challenging enough that I actually reset the
solutions and redid these a couple of times.

(Aside, if you are using nixos, John Wiegley has a working nix-shell that needs
to be pinned to any "pre coq-8.6" commit on nixpkgs[fn:2]: https://github.com/jwiegley/dsss17

** CompCert resources
The CompCert conference paper is too high-level to be useful in understanding
the proof. You can give it a skim, but it will not assist in understanding how
CompCert works. Instead, the Journal of Automated Reasoning article should be used.
** CompCert tactics
- monadInv :: do this to apply inversion to any Result monad. sometimes, when it
  does not work, you will need to manually push terms through the monad and
  unfold it.

- exploit :: less common. I forget exactly what this does, but it does get used
  in reference proofs.
** Pen-and-paper proofs
It is important to understand what each symbol is doing before you run the code.
To this end, I recommend writing out the goal and premises on paper. CompCert is
a little too large, from my perspective, to do real pen-and-paper proofs -- but
the act of physically writing down a judgement tree really helped in this
process.

In addition, a lot of effort needs to be
* Current status
** Expected next steps
Targetproof.

* Footnotes


[fn:2] I used 5215ed6b216fedb37bfd241666048d9a4126b2b4
[fn:1] Referencing the NSF grant proposal.
