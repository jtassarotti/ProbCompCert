#!/usr/bin/env bash

TEST_FOLDER=stanfrontend/tests/upstream

cd $(git rev-parse --show-toplevel)

echo "|-----------+-------------------------------------------------|"
echo "| test      |  compiles?                                      |"
echo "|-----------+-------------------------------------------------|"

total_tests=0
working_tests=0
failed_tests=0

# error groups based on $(test-report | cut -d '|' -f 3 | sort | uniq)
ERR_00="Syntax error"
ERR_01="statement: print"
ERR_02="statement: reject"
ERR_03="statement: var"
ERR_04="data loading"
ERR_05="stype2basic"
ERR_06="unsupported type"
ERR_07="NYI"
ERR_08="Denumpyification.transf_program: operator"
ERR_09="call expression should have been removed already"
ERR_10="bad definition/use of variable"
ERR_11="Cshmgen.make_binarith"
ERR_12="tilde called with invalid distribution"

err_00_count=0
err_01_count=0
err_02_count=0
err_03_count=0
err_04_count=0
err_05_count=0
err_06_count=0
err_07_count=0
err_08_count=0
err_09_count=0
err_10_count=0
err_11_count=0
err_12_count=0
err_misc_count=0


cd $TEST_FOLDER
for f in $(ls *.stan); do
    ERROR="$(ccompstan $f 2>&1 | grep error | sed 's/.*\"\([^\"]*\)\".*/\1/')"
    #ERROR="$(ccompstan $TEST_FOLDER/$f 2>&1 | grep error | sed 's/.*\"\([^\"]*\)\".*/\1/')"
    if [[ -n "$ERROR" ]]; then
        echo "| $f | Error: $ERROR |";
        failed_tests=$((failed_tests + 1))
        case "$ERROR" in
            *${ERR_00}*) err_00_count=$((err_00_count + 1)) ;;
            *${ERR_01}*) err_01_count=$((err_01_count + 1)) ;;
            *${ERR_02}*) err_02_count=$((err_02_count + 1)) ;;
            *${ERR_03}*) err_03_count=$((err_03_count + 1)) ;;
            *${ERR_04}*) err_04_count=$((err_04_count + 1)) ;;
            *${ERR_05}*) err_05_count=$((err_05_count + 1)) ;;
            *${ERR_06}*) err_06_count=$((err_06_count + 1)) ;;
            *${ERR_07}*) err_07_count=$((err_07_count + 1)) ;;
            *${ERR_08}*) err_08_count=$((err_08_count + 1)) ;;
            *${ERR_09}*) err_09_count=$((err_09_count + 1)) ;;
            *${ERR_10}*) err_10_count=$((err_10_count + 1)) ;;
            *${ERR_11}*) err_11_count=$((err_11_count + 1)) ;;
            *${ERR_12}*) err_12_count=$((err_12_count + 1)) ;;
            *) err_misc_count=$((err_misc_count + 1)) ;;
        esac
    else
        echo "| $f | compiles! |";
        working_tests=$((working_tests + 1))
    fi;
    total_tests=$((total_tests + 1))
done

echo "working: $working_tests / $total_tests"
echo "failed : $failed_tests / $total_tests"
echo
echo "breakdown:"
printf "%3d - Error '%s'\n" $err_00_count "$ERR_00"
printf "%3d - Error '%s'\n" $err_01_count "$ERR_01"
printf "%3d - Error '%s'\n" $err_02_count "$ERR_02"
printf "%3d - Error '%s'\n" $err_03_count "$ERR_03"
printf "%3d - Error '%s'\n" $err_04_count "$ERR_04"
printf "%3d - Error '%s'\n" $err_05_count "$ERR_05"
printf "%3d - Error '%s'\n" $err_06_count "$ERR_06"
printf "%3d - Error '%s'\n" $err_07_count "$ERR_07"
printf "%3d - Error '%s'\n" $err_08_count "$ERR_08"
printf "%3d - Error '%s'\n" $err_09_count "$ERR_09"
printf "%3d - Error '%s'\n" $err_10_count "$ERR_10"
printf "%3d - Error '%s'\n" $err_11_count "$ERR_11"
printf "%3d - Error '%s'\n" $err_12_count "$ERR_12"
printf "%3d - Error '%s'\n" $err_misc_count "Unknown Errors"
